macro_rules! const_as {
    ($($n:literal)*) => {
        ::paste::paste!(
            $(
                const [< AS _ $n >]: Self;
            )*
        );
    };
}

macro_rules! const_as_impl {
    ($ty:ident $($n:literal)*) => {
        ::paste::paste!(
            $(
                const [< AS _ $n >]: Self = [< $n $ty >];
            )*
        );
    };
}

macro_rules! impl_for {
    ($($ty:ident)*) => {
        $(
            impl QuickAccess for $ty {
                const_as_impl!(
                    $ty
                    0 1 2 3 4 5 6 7 8 9
                    10 11 12 13 14 15 16 17 18 19 
                    20 21 22 23 24 25 26 27 28 29 
                    30 31 32 33 34 35 36 37 38 39
                    40 41 42 43 44 45 46 47 48 49
                    50 51 52 53 54 55 56 57 58 59
                    60 61 62 63 64 65 66 67 68 69
                    70 71 72 73 74 75 76 77 78 79
                    80 81 82 83 84 85 86 87 88 89
                    90 91 92 93 94 95 96 97 98 99
                    100
                );
            }  
        )*
    };
}

pub trait QuickAccess {
    const_as!(
        0 1 2 3 4 5 6 7 8 9
        10 11 12 13 14 15 16 17 18 19 
        20 21 22 23 24 25 26 27 28 29 
        30 31 32 33 34 35 36 37 38 39
        40 41 42 43 44 45 46 47 48 49
        50 51 52 53 54 55 56 57 58 59
        60 61 62 63 64 65 66 67 68 69
        70 71 72 73 74 75 76 77 78 79
        80 81 82 83 84 85 86 87 88 89
        90 91 92 93 94 95 96 97 98 99
        100
    );
}

impl_for!(
    u8 u16 u32 u64 u128 usize
    i8 i16 i32 i64 i128 isize
    f32 f64
);